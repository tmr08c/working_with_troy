require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ReviewsController, type: :controller do
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all reviews as @reviews" do
      review = FactoryGirl.create(:review)
      get :index, {}, valid_session
      expect(assigns(:reviews)).to eq([review])
    end

    it 'should sort reviews by most recent first' do
      old_review = FactoryGirl.create(:review, created_at: DateTime.yesterday)
      older_review = FactoryGirl.create(:review, created_at: DateTime.yesterday - 1.day)
      new_review = FactoryGirl.create(:review, created_at: DateTime.now)

      get :index, {}, valid_session
      expect(assigns(:reviews)).to eq([new_review, old_review, older_review])
    end
  end

  describe "GET #new" do
    it "assigns a new review as @review" do
      get :new, {}, valid_session
      expect(assigns(:review)).to be_a_new(Review)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      let(:valid_attributes) do
        {
          body: 'body',
          name: 'name',
          relationship: 'relationship'
        }
      end

      it "creates a new Review" do
        expect { post :create, {:review => valid_attributes}, valid_session }
          .to change(Review, :count)
          .by(1)
      end

      it "redirects to the created review" do
        post :create, {:review => valid_attributes}, valid_session

        expect(response).to redirect_to(reviews_path)
      end
    end

    context "with invalid params" do
      let(:invalid_attributes) do
        {
          body: '',
          name: '',
          relationship: ''
        }
      end

      it "assigns a newly created but unsaved review as @review" do
        post :create, {:review => invalid_attributes}, valid_session
        expect(assigns(:review)).to be_a_new(Review)
      end

      it "re-renders the 'new' template" do
        post :create, {:review => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end
end
